---
description: 
globs: 
alwaysApply: false
---
# Project Testing Strategy

This project utilizes Vitest for testing, configured separately for different environments: Worker, Unit/Component, and E2E. Tests are typically run via pnpm filters targeting the `react-on-workers-with-assets` package defined in [`apps/web/package.json`](mdc:apps/web/package.json).

## Worker Tests

-   **Purpose:** Test Hono API endpoints, Durable Objects, and other code intended to run within the Cloudflare Workers environment.
-   **Configuration:** [`apps/web/vitest.config.worker.ts`](mdc:apps/web/vitest.config.worker.ts)
-   **Environment:** Uses `@cloudflare/vitest-pool-workers` to simulate the workerd runtime. Configuration relies on [`apps/web/wrangler.jsonc`](mdc:apps/web/wrangler.jsonc).
-   **Bindings:** Access Cloudflare bindings (KV, DO, R2, Env Vars) within tests via `import { env } from 'cloudflare:test'`. Types for these bindings should be defined in [`apps/web/worker-configuration.d.ts`](mdc:apps/web/worker-configuration.d.ts) (generated by `wrangler types`) and used via type casting (e.g., `const typedEnv = env as Env;`).
-   **Mocking:**
    -   **External Dependencies:** Use `vi.mock` to mock external Node/NPM modules (e.g., `@aws-sdk/client-s3`, `@aws-sdk/s3-request-presigner`). Avoid mocking the `cloudflare:test` module itself.
    -   **Cloudflare Bindings:** **Do not** manually mock bindings provided by `env` (like KV namespaces or R2 buckets). The test pool provides functional instances. Interact with them directly (e.g., `await env.MY_KV.put(...)`, `await env.MY_DO.get(id).someMethod(...)`).
-   **Running:** `pnpm --filter react-on-workers-with-assets test:worker`
-   **Current Status & Issues:**
    -   `upload-api.test.ts` is **blocked** by a `TypeError` caused by the `snakecase-keys` library (a transitive dependency, likely via `@aws-sdk`). Configuration attempts (`ssr.noExternal`, `deps.inline`) have failed. The most promising approach is comprehensively mocking `@aws-sdk/client-s3` using `vi.mock`, but this introduced complex `R2Bucket` type errors that need resolution.
    -   `job-registry.test.ts` is **skipped** (`describe.skip`) due to persistent, complex TypeScript errors involving type mismatches between `DurableObjectStub` from `cloudflare:test` and expected types, even when using RPC calls.

## Unit/Component Tests

-   **Purpose:** Test React components, hooks, or utility functions in isolation.
-   **Configuration:** [`apps/web/vitest.config.unit.ts`](mdc:apps/web/vitest.config.unit.ts) (Assumed config, path may differ slightly).
-   **Environment:** Standard Vitest Node/JSDOM environment.
-   **Mocking:** Use `vi.mock` or `vi.spyOn` as needed for child components, hooks, API calls (`trpc` client), or browser APIs not present in JSDOM.
-   **Running:** `pnpm --filter react-on-workers-with-assets test:unit`
-   **Current Status:** Configuration likely exists, but tests need to be written/fleshed out.

## E2E Tests

-   **Purpose:** Test end-to-end user flows through the deployed application interface.
-   **Configuration:** [`apps/web/vitest.config.e2e.ts`](mdc:apps/web/vitest.config.e2e.ts) (Assumed config, path may differ slightly).
-   **Environment:** Vitest integrated with Playwright for browser automation.
-   **Running:** Command likely defined in root `package.json` or `apps/web/package.json`.
-   **Current Status:** Setup appears generally correct based on validation. Consider increasing default timeouts in the Playwright configuration within the Vitest config file for robustness.

## General Mocking Practices

-   Use `vi.mock()` to completely replace a module with a mock implementation, ideal for isolating code from external dependencies (e.g., AWS SDK, external APIs).
-   Use `vi.spyOn()` to wrap existing functions/methods to track calls or provide limited mock implementations while retaining original functionality (less common for external dependencies, more for internal interactions).
-   Always clean up mocks between tests using `vi.clearAllMocks()` or `vi.resetAllMocks()` in `beforeEach` or `afterEach` blocks.
