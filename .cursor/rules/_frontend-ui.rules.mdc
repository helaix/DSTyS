# Sparkflow Frontend UI Development Rules (_frontend-ui.rules.mdc)

**Purpose:** To ensure consistency, quality, accessibility, and maintainability of the Sparkflow frontend UI, built with RedwoodSDK (React), `shadcn/ui`, and Tailwind CSS, and powered by the Local-First Sync Engine (LFS).
**Primary References:** UX/UI Plan v1.3, Architecture Document v0.5, RedwoodSDK Documentation, `shadcn/ui` Documentation, Tailwind CSS Documentation, LFS Engine (e.g., `LiveStore.dev`) React SDK Documentation.

---
**Rule ID:** `UI-001`
**Rule Title:** Component Library Usage (`shadcn/ui`)
**Applies To:** All frontend components
**Purpose:** Ensure visual consistency, leverage accessibility foundations, and reduce redundant effort.
**Scope:** UI development.
**Guideline:**
    *   Primarily use components from the `shadcn/ui` library (available in `apps/sparkflow-rw/src/components/ui/`).
    *   Custom composite components SHOULD be built by composing these primitives.
    *   New custom components that are reusable across features SHOULD be added to a shared UI package (e.g., `packages/ui-components`) with clear props defined (using `@effect/schema` for data props where appropriate).
**Rationale:** Standardizes the look and feel and accelerates development.

---
**Rule ID:** `UI-002`
**Rule Title:** Styling with Tailwind CSS
**Applies To:** All frontend styling
**Purpose:** Maintain styling consistency, promote rapid UI development, and simplify theming.
**Scope:** CSS and component styling.
**Guideline:**
    *   All styling MUST be done using Tailwind CSS utility classes directly in JSX.
    *   Avoid writing custom CSS files or inline styles unless absolutely necessary for highly specific cases not covered by Tailwind and approved by the lead. Document such exceptions.
    *   Adhere to the project's Tailwind configuration (`tailwind.config.js`) for theme colors, spacing, fonts, etc.
**Rationale:** Ensures a consistent and maintainable styling approach.

---
**Rule ID:** `UI-003`
**Rule Title:** State Management Strategy
**Applies To:** Frontend state management
**Purpose:** Ensure a single source of truth for shared data, leverage LFS reactivity, and simplify state logic.
**Scope:** Client-side state.
**Guideline:**
    *   **Primary Shared State:** The Local-First Sync Engine (LFS) MUST be the primary source of truth for all shared application state and server-derived data displayed in the UI. UI components subscribe to LFS data using its React bindings/hooks.
    *   **Local Component State:** Use standard React Hooks (`useState`, `useReducer`, `useRef`) for ephemeral UI state that is truly local to a component and does not need to be persisted or shared (e.g., form input values before submission to LFS, toggle state of a purely visual element).
    *   **Server Commands (Non-LFS):** Use Redwood Server Actions (EffectTS-driven) for client-initiated commands not primarily about LFS document sync. TanStack Query MAY be considered for managing client-side state for these Server Action calls if LFS optimistic updates are insufficient, but LFS is preferred.
    *   **Avoid Other Global State Managers:** Do not introduce other global client-side state management libraries (e.g., Redux, Zustand, Jotai) without strong justification and team approval, as LFS should cover most shared state needs.
**Rationale:** Clarifies state management responsibilities and leverages LFS strengths.

---
**Rule ID:** `UI-004`
**Rule Title:** UI Reactivity and LFS Integration
**Applies To:** Dynamic UI elements
**Purpose:** Ensure the UI reflects the current state of the application in real-time.
**Scope:** Components displaying shared or server-derived data.
**Guideline:**
    *   All UI components displaying dynamic data MUST subscribe to the relevant LFS documents/collections and reactively update when the underlying data changes.
    *   Ensure subscriptions are efficient and only request necessary data slices to minimize re-renders.
    *   User interactions that modify shared state SHOULD commit events to the LFS or call Redwood Server Actions that in turn update LFS/D1.
**Rationale:** Core to the "live" and responsive feel of Sparkflow.

---
**Rule ID:** `UI-005`
**Rule Title:** Forms and Input Validation
**Applies To:** All user input forms
**Purpose:** Provide good UX, ensure data integrity, and maintain consistency.
**Scope:** Form development.
**Guideline:**
    *   Use React Hook Form (or a similarly robust library if a different standard is adopted) integrated with `shadcn/ui` components (`Input`, `Textarea`, `Checkbox`, `RadioGroup`, `Select`) for all user input forms.
    *   Client-side validation for immediate user feedback SHOULD be implemented using `@effect/schema` integrated with the forms library (e.g., via a resolver).
    *   All form data submitted to the backend (via Server Actions) MUST be re-validated on the server using the same `@effect/schema` definitions.
**Rationale:** Ensures robust and user-friendly form handling.

---
**Rule ID:** `UI-006`
**Rule Title:** Accessibility (WCAG 2.1 AA Minimum)
**Applies To:** All UI components and views
**Purpose:** Ensure Sparkflow is usable by people with diverse abilities.
**Scope:** UI design and implementation.
**Guideline:**
    *   All UI components and views MUST be designed and implemented to meet at least WCAG 2.1 Level AA accessibility standards. This includes:
        *   Full keyboard navigability for all interactive elements.
        *   Semantic HTML structure.
        *   Sufficient color contrast (as per UX/UI Plan v1.3, Section 9).
        *   Text alternatives (ARIA labels, alt text) for non-text content.
        *   Proper focus management and clear focus indicators.
        *   ARIA attributes for dynamic content and complex components (many `shadcn/ui` components handle this well).
    *   Refer to UX/UI Plan v1.3, Section 10 for detailed accessibility considerations.
**Rationale:** Promotes inclusivity and broadens the potential user base.

---
**Rule ID:** `UI-007`
**Rule Title:** Responsive Design
**Applies To:** All UI views
**Purpose:** Ensure usability across a range of devices.
**Scope:** Layout and styling.
**Guideline:**
    *   All UI views MUST be responsive and provide an optimal experience across common device breakpoints (Mobile, Tablet, Desktop) as defined in UX/UI Plan v1.3, Section 7.3.
    *   Use Tailwind CSS responsive prefixes (`sm:`, `md:`, `lg:`, `xl:`) for adapting layouts, typography, and component visibility.
    *   Prioritize content and functionality appropriately for smaller screens. Test thoroughly on actual devices or accurate emulators.
**Rationale:** Caters to users on various devices and improves accessibility.

---
**Rule ID:** `UI-008`
**Rule Title:** Error Handling and User Feedback
**Applies To:** All user interactions that can result in errors
**Purpose:** Improve user trust and help users recover from problems.
**Scope:** Error display and notification.
**Guideline:**
    *   Display user-friendly, clear, and concise error messages for all client-side and server-side errors. Avoid technical jargon.
    *   For errors originating from backend processes (e.g., Server Action failures, LFS sync issues, Workflow activity failures reported via LFS), provide context if possible and suggest potential recovery actions or next steps.
    *   Use `shadcn/ui Alert` or `Sonner` components for toast notifications for non-blocking feedback or errors.
**Rationale:** Enhances user experience by providing clear communication during error states.

---
**Rule ID:** `UI-009`
**Rule Title:** Loading States and Skeletons
**Applies To:** UI elements displaying data that requires fetching or processing
**Purpose:** Manage user expectations and improve perceived performance during data loading.
**Scope:** Asynchronous data display.
**Guideline:**
    *   Implement clear loading states for data fetching or long-running operations. Use `shadcn/ui Skeleton` components for content placeholders to reduce perceived loading time and prevent layout shifts.
    *   For LFS-driven views, initial data loading should be handled gracefully, potentially showing skeletons until the LFS client hydrates with data from local cache or server.
    *   Use `shadcn/ui Progress` bars or spinners for explicit progress indication of background tasks (e.g., file uploads, video analysis workflow progress, render jobs) whose status is updated via LFS.
**Rationale:** Provides a smoother user experience during inevitable delays.

---
**Rule ID:** `UI-010`
**Rule Title:** Visual Consistency and Design System Adherence
**Applies To:** All UI elements
**Purpose:** Maintain a cohesive and professional look and feel.
**Scope:** Visual design and implementation.
**Guideline:** Strictly adhere to the visual design guidelines (colors, typography, spacing, iconography) defined in UX/UI Plan v1.3, Section 9 and implemented via the Tailwind CSS configuration and `shadcn/ui` theme.
**Rationale:** Reinforces brand identity and improves usability through familiarity.

---
**Rule ID:** `UI-011`
**Rule Title:** Frontend Performance Optimization
**Applies To:** All frontend code
**Purpose:** Ensure a smooth and fast user experience.
**Scope:** Component rendering, data fetching, and asset loading.
**Guideline:**
    *   Optimize React component rendering (use `React.memo`, `useCallback`, `useMemo` judiciously where performance profiling indicates a bottleneck).
    *   Minimize unnecessary re-renders caused by LFS updates by subscribing to granular data slices and using appropriate memoization in selectors if applicable.
    *   Lazy load routes and heavy components (RedwoodJS supports this via Vite's dynamic imports) to improve initial page load time.
    *   Optimize image assets and other static resources.
**Rationale:** Critical for user satisfaction and retention.