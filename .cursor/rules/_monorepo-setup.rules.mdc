# DSTyS Monorepo Setup Rules (_monorepo-setup.rules.mdc)

**Purpose:** To define standards for the pnpm monorepo structure, package organization, TypeScript configuration, dependency management, and development workflows for the DSTyS project.

---
**Rule ID:** `DSTYS-MONO-001`
**Rule Title:** Package Manager and Build Orchestration
**Applies To:** All Developers, CI/CD Setup
**Purpose:** Standardize core tooling for dependency management and build processes.
**Scope:** Entire monorepo.
**Guideline:**
    *   **Package Manager:** `pnpm` workspaces **MUST** be used. Execute `pnpm install` in the root for all setup.
    *   **Build Orchestration:** While Turborepo is common, for this library, direct `pnpm` workspace scripts and `tsc` (or `swc`) for building might be sufficient initially. If complexity grows, Turborepo can be added. For now, focus on `pnpm run build` at the root.
**Rationale:** `pnpm` provides efficient disk usage and strict dependency resolution.

---
**Rule ID:** `DSTYS-MONO-002`
**Rule Title:** Root Directory Structure
**Applies To:** All Developers, AI Code Generation
**Purpose:** Establish a clear and consistent organization for the library source, tests, documentation, and project files.
**Scope:** Root level of the monorepo.
**Guideline:** Adhere to the following primary top-level directory structure:
    *   `source/`: Contains the main library source code (TypeScript files).
        *   `primitives/`: Core building blocks like `Module.ts`, `Signature.ts`, `Example.ts`, `Prediction.ts`, `Tool.ts`.
        *   `signatures/`: `Field.ts`, `Signature.ts` (if class-based definition is complex), utilities.
        *   `predict/`: `Predict.ts`, `ChainOfThought.ts`, `ReAct.ts`, etc.
        *   `retrieve/`: `Retrieve.ts` and specific retriever implementations.
        *   `teleprompt/`: Optimizer implementations.
        *   `clients/`: LM client implementations (`LM.ts`, `OpenAI.ts`, etc.).
        *   `evaluate/`: Evaluation logic and metrics.
        *   `utils/`: Shared utility functions.
    *   `tests/`: Contains all test files, mirroring the `source/` structure.
        *   `primitives/`, `signatures/`, `predict/`, etc.
    *   `docs/`: Project documentation.
        *   `planning/`: PRD, Architecture, Project Overview, Workplans, Templates, Examples.
        *   `api/`: (Future) Generated API documentation.
    *   `.github/`: CI/CD workflows (GitHub Actions).
    *   `.cursor/rules/`: AI Agent rules.
    *   `dspy/`: Submodule for the Python DSPy reference implementation.
**Rationale:** Promotes modularity, discoverability, and separation of concerns for a library structure.

---
**Rule ID:** `DSTYS-MONO-003`
**Rule Title:** Package Naming and Publishing
**Applies To:** All Developers, CI/CD Setup
**Purpose:** Ensure consistent naming for the published package.
**Scope:** `package.json`.
**Guideline:**
    *   The main library package **MUST** be named `dstys` (or a scoped name like `@your-org/dstys` if preferred).
    *   The `package.json` **MUST** correctly define `name`, `version`, `description`, `author`, `license`, `repository`, `bugs`, `homepage`, `keywords`.
    *   `type` **MUST** be `"module"` for ESM-first approach.
    *   `exports` field **MUST** be configured correctly to expose ESM, CJS (if generated), and TypeScript types.
    *   `files` field **MUST** include the `build` (or `dist`) directory and any other necessary assets.
**Rationale:** Standardizes package metadata for publishing to npm.

---
**Rule ID:** `DSTYS-MONO-004`
**Rule Title:** TypeScript Configuration
**Applies To:** All Developers, AI Code Generation, CI/CD Setup
**Purpose:** Enforce strict type checking and consistent TypeScript settings.
**Scope:** `tsconfig.json` and `tsconfig.build.json`.
**Guideline:**
    *   **Root `tsconfig.json`**: Defines common strict compiler options for development and type checking (e.g., `strict: true`, `noUncheckedIndexedAccess: true`, `module: "NodeNext"`, `moduleResolution: "NodeNext"`, `esModuleInterop: true`, `skipLibCheck: true`, `target: "ES2022"`).
        *   `baseUrl` SHOULD be `"source"`.
        *   `paths` SHOULD be configured for any internal aliases (e.g., `~/*": ["./*"]`).
        *   `allowImportingTsExtensions: true` and `noEmit: true` (or `emitDeclarationOnly: true` if only for checking).
    *   **`tsconfig.build.json`**: Extends `tsconfig.json`.
        *   Overrides `noEmit` to `false` and `emitDeclarationOnly` to `false` (if `declaration` is true in base).
        *   Sets `declaration: true`, `declarationMap: true`, `sourceMap: true`.
        *   `include` array SHOULD point to `source/**/*`.
        *   `exclude` array SHOULD exclude `**/*.test.ts` and `node_modules`, `build`.
    *   Compiler options SHOULD enable `resolveJsonModule: true`.
**Rationale:** Ensures type safety, modern JavaScript output, and proper declaration files for consumers.

---
**Rule ID:** `DSTYS-MONO-005`
**Rule Title:** ESLint & Biome/Prettier Configuration
**Applies To:** All Developers, AI Code Generation, CI/CD Setup
**Purpose:** Maintain consistent code style and quality.
**Scope:** Entire project (excluding `dspy/` submodule).
**Guideline:**
    *   **Root Configurations**: Single root `eslint.config.mjs` (or `.eslintrc.js`) and `biome.jsonc` (or `.prettierrc.json`) will define standards.
    *   ESLint SHOULD use `@typescript-eslint/parser` and recommended TypeScript rules.
    *   Biome (or Prettier) SHOULD be configured for consistent formatting (line width, quotes, semicolons).
    *   **CI Enforcement**: Linting and formatting **MUST** be part of the CI pipeline and pass for PRs to be merged.
**Rationale:** Improves code readability and reduces cognitive load.

---
**Rule ID:** `DSTYS-MONO-006`
**Rule Title:** Dependency Management with `pnpm`
**Applies To:** All Developers, AI Code Generation, CI/CD Setup
**Purpose:** Ensure efficient and consistent dependency management.
**Scope:** Root `package.json`.
**Guideline:**
    *   All dependencies (`dependencies`, `devDependencies`) **MUST** be managed in the root `package.json`.
    *   Use `pnpm add <package>` for adding dependencies.
    *   Regularly update dependencies and audit for vulnerabilities (`pnpm audit`).
**Rationale:** Simplifies dependency management for a single-package library structure.

---
**Rule ID:** `DSTYS-MONO-007`
**Rule Title:** Build and Development Scripts (Root `package.json`)
**Applies To:** All Developers, CI/CD Setup
**Purpose:** Provide standardized commands for common development tasks.
**Scope:** Root of the monorepo.
**Guideline:** Define scripts in the root `package.json` like:
    *   `"build": "pnpm run prebuild && run-p build:*"` (using `npm-run-all2`)
    *   `"prebuild": "rimraf build"`
    *   `"build:swc": "swc ./source -d ./build --strip-leading-paths"` (or `tsc -p tsconfig.build.json`)
    *   `"build:types": "tsc --project tsconfig.build.json --emitDeclarationOnly"` (if SWC is used for JS compilation)
    *   `"lint": "eslint . --report-unused-disable-directives --max-warnings 0"`
    *   `"format": "biome format ./source --write"` (or `prettier --write .`)
    *   `"check": "run-p check:*"`
    *   `"check:eslint": "eslint . ..."`
    *   `"check:biome": "biome check ./source"`
    *   `"test": "vitest run"`
    *   `"test:unit": "vitest run unit --coverage"`
    *   `"typecheck": "tsc --noEmit -p tsconfig.json"`
    *   `"clean": "rimraf build node_modules coverage .turbo"`
**Rationale:** Simplifies development workflows.

---
**Rule ID:** `DSTYS-MONO-008`
**Rule Title:** Build Output
**Applies To:** Build process
**Purpose:** Ensure correct build artifacts for publishing.
**Scope:** `build/` (or `dist/`) directory.
**Guideline:**
    *   The build process (e.g., using SWC or TSC) **MUST** output JavaScript files (ESM, and CJS if needed) and TypeScript declaration files (`.d.ts`, `.d.ts.map`) to the `build/` (or `dist/`) directory.
    *   Source maps (`.js.map`) **MUST** also be generated.
**Rationale:** Essential for consumers of the library.