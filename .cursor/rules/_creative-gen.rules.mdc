# Sparkflow Creative Generation Rules (_creative-gen.rules.mdc)

**Purpose:** To guide the generation of various creative assets (text, voice, image, video, animation code) using AI models, the Remotion rendering pipeline, and Cloudflare Workflow orchestration, ensuring quality, consistency, and adherence to Sparkflow's architecture.
**Primary Orchestration:** Cloudflare Workflows (TypeScript defined) for multi-step creative generation pipelines.
**Rendering Engine:** Remotion, executed within DO-managed Cloudflare Containers (primary) or AWS Lambda (fallback).
**Key Components:** `CreativeGenDO`, `RenderManagerDO`, EffectTS Services for AI APIs (via AI Gateway), Templates (D1).
**References:** PRD v1.5 (`CREATIVE_GEN` Epic), Arch Doc v0.5, `_video-ai.rules.mdc`.

---
**Rule ID:** `CREGEN-001`
**Rule Title:** Workflow-Driven Orchestration for Complex Creatives
**Applies To:** Multi-step creative generation tasks
**Purpose:** Ensure robust, resumable, and observable orchestration for complex creative processes.
**Scope:** Design of creative generation pipelines.
**Guideline:** All non-trivial creative generation tasks (e.g., full video ad assembly from script to render, video-to-animation, complex multimodal translations) **MUST** be orchestrated by Cloudflare Workflows (e.g., `FullAdGenerationWorkflow`, `AnimationCodeGenerationWorkflow`). The `CreativeGenDO` may act as a stateful host for specific Workflow activities or manage simpler, single-step generation tasks.
**Rationale:** Leverages Cloudflare Workflows for durability and complex coordination.
**Reference:** `_backend-api.rules.mdc` (Rule `API-005`)

---
**Rule ID:** `CREGEN-002`
**Rule Title:** Context-Driven Generation from `KNOWLEDGE_RAG`
**Applies To:** All creative generation
**Purpose:** Ensure creatives are relevant, on-brand, and strategically aligned.
**Scope:** Input preparation for AI models.
**Guideline:** All creative generation processes **MUST** leverage context from the `KNOWLEDGE_RAG` system. This includes brand guidelines, audience personas, product information, insights from video analysis (see `_video-ai.rules.mdc`), and successful ad patterns from `ANALYTICS_LINEAGE`.
**Rationale:** Produces more effective and targeted creative assets.

---
**Rule ID:** `CREGEN-003`
**Rule Title:** Remotion Rendering via DO-Managed Cloudflare Containers
**Applies To:** All programmatic video rendering
**Purpose:** Centralize and standardize video rendering on Cloudflare infrastructure for scalability and manageability.
**Scope:** Video output pipeline.
**Guideline:**
    *   All Remotion video rendering **MUST** be executed within Cloudflare Containers, managed and orchestrated by the `RenderManagerDO`.
    *   `CreativeGenDO` (or a Workflow activity it calls) is responsible for programmatically assembling Remotion project input props (including R2 URLs for audio, images, animation code snippets) and submitting render jobs to the `RenderManagerDO` via its EffectTS service interface.
    *   `RenderManagerDO` handles:
        *   Queueing render requests if necessary.
        *   Provisioning/obtaining a Cloudflare Container instance running Remotion (via `CFContainerService`).
        *   Securely passing input props and asset R2 URLs to the Remotion process in the container.
        *   Initiating the `npx remotion render` command within the container.
        *   Monitoring render progress (from container logs or callbacks).
        *   Ensuring output video is written to a specified R2 path.
        *   Reporting final status (success/failure, output R2 URL, error messages) back to the caller (Workflow or `CreativeGenDO`) and updating LFS.
    *   The Dockerfile for the Remotion container **MUST** include Node.js, Puppeteer, Remotion CLI, FFMPEG, and necessary fonts/codecs. It must be optimized for size and startup.
    *   AWS Lambda for Remotion is a secondary/fallback option, invoked by `RenderManagerDO` if direct CF Container execution faces limitations for specific jobs.
**Rationale:** Provides a robust and scalable solution for programmatic video creation.
**Reference:** `_architecture.rules.mdc` (Rule `ARCH-001`, Decision 7), `_backend-api.rules.mdc` (Rule `API-007`)

---
**Rule ID:** `CREGEN-004`
**Rule Title:** Animation Code Generation and Integration
**Applies To:** Creatives involving programmatic animation
**Purpose:** Enable dynamic, AI-driven animations in videos.
**Scope:** Animation asset pipeline.
**Guideline:**
    *   Use Gemini 2.5 Pro (or other suitable models via AI Gateway, orchestrated by `AnimationCodeGenerationWorkflow`) to generate animation code (p5.js for `RemotionSkiaCanvas`, Lottie JSON) based on scene descriptions, desired styles, or video analysis.
    *   Generated animation code **MUST** be validated, sanitized (for security if `eval` is used), and stored as an asset (text file in R2 or structured data in `D1_APP_DATA` `AnimationCodeSnippets` table), linked to a scene or creative.
    *   Remotion compositions **MUST** be designed to dynamically load and utilize this animation code.
**Rationale:** Automates a complex creative task and allows for novel visual effects.
**Reference:** `_video-ai.rules.mdc` (Rule `VIDAI-008`)

---
**Rule ID:** `CREGEN-005`
**Rule Title:** Template System Adherence
**Applies To:** All structured creative generation (especially video)
**Purpose:** Ensure brand consistency, stylistic coherence, and efficient variation generation.
**Scope:** Creative asset structuring.
**Guideline:**
    *   All creative generation processes (especially for video ads) **MUST** utilize the advanced template system (`P3-CRE-002`).
    *   Templates (defined in `D1_APP_DATA` `CreativeTemplates` table using `@effect/schema`) specify structure (number/types of scenes), Remotion composition/component references, default styling parameters (fonts, colors, transitions), and placeholders for dynamic content.
    *   AI SHOULD be capable of selecting appropriate templates based on context or suggesting template customizations.
**Rationale:** Streamlines creative production and maintains quality standards.

---
**Rule ID:** `CREGEN-006`
**Rule Title:** AI Voiceover Synthesis (TTS) and Voice Cloning
**Applies To:** Creatives requiring voiceovers
**Purpose:** Provide high-quality, personalized voiceovers.
**Scope:** Audio generation pipeline.
**Guideline:**
    *   Utilize the chosen TTS provider (e.g., ElevenLabs via AI Gateway, wrapped in an EffectTS `TextToSpeechService`).
    *   Integrate with the voice cloning feature (`P3-CRE-003`). Generated voiceovers **MUST** use the selected AI voice or user's cloned voice (with proper consent mechanisms managed in UI).
    *   Generated audio files (e.g., MP3, WAV) **MUST** be stored in R2, with metadata (duration, voice ID) linked in `D1_APP_DATA` and LFS.
**Rationale:** Enhances creative personalization and quality.

---
**Rule ID:** `CREGEN-007`
**Rule Title:** Asset Management, Versioning, and Lineage
**Applies To:** All generated creative assets
**Purpose:** Ensure traceability, reproducibility, and effective asset management.
**Scope:** Asset lifecycle.
**Guideline:**
    *   All significant generated assets (scripts, voiceovers, images, videos, animation code) **MUST** be versioned where appropriate and stored (blobs in R2, metadata in `D1_APP_DATA` `Assets` table).
    *   Asset metadata **MUST** include links to source inputs (prompts, RAG context IDs, source video asset IDs), templates used, AI models/versions, and generation status. This data is critical for the `ANALYTICS_LINEAGE` system.
    *   Asset status (e.g., "generating_script", "rendering_video", "complete") and links to final assets **MUST** be published to the Local-First Sync Engine for reactive UI display.
**Rationale:** Supports analytics, iteration, and debugging.

---
**Rule ID:** `CREGEN-008`
**Rule Title:** Error Handling in Generation Pipelines
**Applies To:** All creative generation workflows
**Purpose:** Improve resilience of complex, multi-step generation processes.
**Scope:** Workflow and activity error management.
**Guideline:**
    *   Cloudflare Workflows orchestrating creative generation **MUST** have robust error handling for each activity (e.g., TTS failure, image generation error, Remotion render error in Container).
    *   Utilize EffectTS typed errors within activities, and Workflow-level `try/catch` or compensation logic.
    *   Partial successes (e.g., script generated but voiceover failed) SHOULD be saved where possible.
    *   Errors **MUST** be logged comprehensively and reported to the user via LFS with clear, actionable feedback and potential recovery options (e.g., "TTS failed for hook 3. [Retry] [Use Default Voice] [Skip Hook]").
**Rationale:** Provides a better user experience when issues occur.

---
**Rule ID:** `CREGEN-009`
**Rule Title:** Universal Translation Layer (Conceptual within Workflows)
**Applies To:** Cross-modal content transformation
**Purpose:** Enable seamless transformation of content between different creative modalities.
**Scope:** Design of advanced creative workflows.
**Guideline:** The "Universal Translation Layer" is an architectural capability achieved by chaining AI analysis and generation services via Cloudflare Workflows.
    *   Example Workflow (Text Article -> Animated Video Snippet):
        1.  Activity 1 (EffectTS): Input text article. Use LLM to summarize and extract key scenes/points.
        2.  Activity 2 (EffectTS): For each scene, use LLM to generate visual description and short script.
        3.  Activity 3 (EffectTS): For each visual description, generate animation code (Gemini Code Gen).
        4.  Activity 4 (EffectTS): For each script segment, generate TTS audio.
        5.  Activity 5 (EffectTS): Assemble Remotion props using animation code, audio, text overlays.
        6.  Activity 6 (EffectTS): Trigger render via `RenderManagerDO` and CF Container.
    *   Each step's input/output **MUST** use `@effect/schema`. The Workflow definition itself is a TypeScript class.
**Rationale:** Realizes a core strategic capability of Sparkflow.