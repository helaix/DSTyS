# DSTyS Project Context Rules (_project-context.rules.mdc)

**Purpose:** To ensure AI assistants have a foundational understanding of DSTyS's overall goals, target users, and strategic direction.

---
**Rule ID:** `DSTYS-CTX-001`
**Rule Title:** Adhere to DSTyS Vision & Mission
**Applies To:** All Agents
**Purpose:** Maintain project coherence and ensure all efforts contribute to the overarching goals.
**Scope:** All tasks and decision-making.
**Guideline:** All generated outputs, plans, and suggestions MUST align with the core purpose and vision of DSTyS as defined in `docs/planning/PRD.md`, Section 1. This includes achieving 100% feature parity with Python DSPy 2.6.x and leveraging EffectTS for a robust, type-safe, and functional programming model.
**Reference:** `docs/planning/PRD.md` (Section 1)

---
**Rule ID:** `DSTYS-CTX-002`
**Rule Title:** Prioritize Target Audience Needs
**Applies To:** All Agents
**Purpose:** Ensure product-market fit and developer-centric design.
**Scope:** Design, implementation, and feature prioritization.
**Guideline:** Design and implementation choices MUST prioritize the needs of TypeScript developers, AI engineers, and existing Python DSPy users seeking a TypeScript alternative, as detailed in `docs/planning/PRD.md`, Section 1.5. Focus on type safety, developer experience, and seamless integration with the TypeScript/Node.js ecosystem.
**Reference:** `docs/planning/PRD.md` (Section 1.5)

---
**Rule ID:** `DSTYS-CTX-003`
**Rule Title:** Focus on Core Problems Being Solved
**Applies To:** All Agents
**Purpose:** Ensure the library delivers tangible value by addressing the limitations of traditional prompt engineering.
**Scope:** Solution design and feature development.
**Guideline:** Solutions SHOULD directly address the core problems DSTyS aims to solve, as listed in `docs/planning/PRD.md`, Section 1.2 (brittleness of prompts, maintainability, systematic optimization, error handling).
**Reference:** `docs/planning/PRD.md` (Section 1.2)

---
**Rule ID:** `DSTYS-CTX-004`
**Rule Title:** Understand and Utilize Key Technology Stack
**Applies To:** All Agents (especially CodeGen, Codex)
**Purpose:** Ensure solutions are technically feasible and leverage platform strengths.
**Scope:** Technical design and implementation.
**Guideline:** Be fully aware of and leverage the chosen technology stack: TypeScript 5.0+, Effect library, Node.js 20+, ESM, Zod, Vitest. Adherence to EffectTS patterns for error handling, async operations, and resource management is critical.
**Reference:** `docs/planning/Architecture.md` (Section 2)

---
**Rule ID:** `DSTYS-CTX-005`
**Rule Title:** Align with High-Level Project Phases & Current Focus
**Applies To:** All Agents
**Purpose:** Ensure development progresses logically and meets milestone objectives.
**Scope:** Task prioritization and solution scoping.
**Guideline:** Understand the overall project phases defined in `docs/planning/ProjectOverview.md`, Section 3. The Master Prompt (in `dspy-typescript.main.rules.mdc` or equivalent) will specify the current development focus. Prioritize tasks and solutions relevant to the current phase and the "Must-Ship v0.1 Feature Subset".
**Reference:** `docs/planning/ProjectOverview.md` (Sections 3, 7.4)

---
**Rule ID:** `DSTYS-CTX-006`
**Rule Title:** Strive for Key Success Metrics
**Applies To:** All Agents
**Purpose:** Ensure development efforts are aligned with measurable project success.
**Scope:** Feature design and impact assessment.
**Guideline:** Be aware of the Key Performance Indicators (KPIs) defined in `docs/planning/PRD.md`, Section 3.1 (Feature Parity, Performance Overhead, Adoption, Test Coverage). Proposed solutions should ideally contribute positively to these metrics.
**Reference:** `docs/planning/PRD.md` (Section 3.1)

---
**Rule ID:** `DSTYS-CTX-007`
**Rule Title:** Feature Parity with Python DSPy 2.6.x
**Applies To:** All Agents
**Purpose:** Ensure the TypeScript implementation faithfully replicates the functionality of the target Python DSPy version.
**Scope:** All component implementations and testing.
**Guideline:** All implemented modules, classes, and functions MUST aim for 100% feature parity with their counterparts in Python DSPy version 2.6.x, as detailed in the "API and Behavior Mapping Document" (to be created, see `docs/planning/FollowUps.md`). Deviations MUST be justified and documented. Test-Driven Development (TDD) by porting Python tests first is the primary strategy to ensure this.
**Reference:** `docs/planning/PRD.md` (Section 6.1), `docs/planning/FollowUps.md`