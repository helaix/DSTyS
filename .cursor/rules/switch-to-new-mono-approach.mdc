---
description: 
globs: 
alwaysApply: false
---
Monorepo Setup Implementation Plan

Goal: Establish a TypeScript monorepo foundation using pnpm, Turborepo, Project References, and Path Aliases, optimized for solo development and contributions from AI coding agents via Pull Requests.

Prerequisites:
- Node.js (LTS version recommended)
- pnpm (version 8 or higher)
- Git

Phase 1: Project Initialization & Core Configuration

Step 1: Initialize Project Structure & Git
- Create the root directory for your project.
- Initialize Git: git init
- Create a .gitignore file with standard Node.js entries (e.g., node_modules, dist, .turbo, .env, coverage reports, IDE files).

```bash
# .gitignore Example
node_modules/
dist/
.turbo/
coverage/
.env
.DS_Store
*.log
*.tsbuildinfo

# IDE specific
.vscode/
!.vscode/settings.json
!.vscode/extensions.json
```

Step 2: Configure pnpm Workspace
- Create a pnpm-workspace.yaml file in the root directory:

```yaml
# pnpm-workspace.yaml
packages:
  - 'packages/*'
  # - 'apps/*' # Uncomment or add if you have separate apps directories
```

- Create the root package.json:

```bash
# Initialize with defaults, then edit
pnpm init
```

- Edit the root package.json:
  - Set "private": true.
  - Specify the pnpm version: "packageManager": "pnpm@<your_pnpm_version>" (e.g., "pnpm@8.15.0"). Get version via pnpm --version.
  - Add core dev dependencies: TypeScript, Turborepo, ESLint, etc. (We'll install these later, but you can add placeholders).
  - Remove main, module, types, exports fields as the root is not a published package.
  - Add basic scripts (we'll refine these).

```json
// Example root package.json (partial)
{
  "name": "your-monorepo-root",
  "version": "1.0.0",
  "private": true,
  "packageManager": "pnpm@8.15.0", // Replace with your pnpm version
  "description": "",
  "scripts": {
    "build": "turbo run build",
    "dev": "turbo run dev --parallel",
    "lint": "turbo run lint",
    "format": "biome format --write .", // Or prettier equivalent
    "check-format": "biome format .", // Or prettier equivalent
    "typecheck": "turbo run typecheck",
    "test": "turbo run test",
    "clean": "rm -rf node_modules packages/*/node_modules packages/*/dist .turbo"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    // Add these later in Step 7 & 8
  }
}
```

Step 3: Configure Base TypeScript (tsconfig.base.json)
- Create tsconfig.base.json in the root:

```json
// tsconfig.base.json
{
  "compilerOptions": {
    // Type Checking
    "strict": true,
    "noImplicitAny": true,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "strictBindCallApply": true,
    "strictPropertyInitialization": true,
    "noImplicitThis": true,
    "useUnknownInCatchVariables": true,
    "alwaysStrict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "exactOptionalPropertyTypes": false, // Consider true for stricter checks
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedIndexedAccess": false, // Consider true for stricter checks
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,

    // Modules
    "module": "ES2022", // Target modern ESM
    "moduleResolution": "bundler", // Key for modern tooling & path aliases
    "baseUrl": ".", // Important for path aliases
    "paths": {
      // To be populated in Step 6
      // Example: "@utils/*": ["packages/utils/src/*"]
    },
    "resolveJsonModule": true,

    // Emit
    "declaration": true, // Generate .d.ts files
    "sourceMap": true, // Generate .map files
    "declarationMap": true, // Improves "Go to Definition" across packages
    "outDir": "dist", // Default output directory (can be overridden per package)
    "removeComments": false, // Keep comments in JS output if needed, often false
    "importsNotUsedAsValues": "remove", // Or "error"

    // JavaScript Support (if needed)
    "allowJs": false, // Set to true if you mix JS and TS
    "checkJs": false,

    // Interop Constraints / Language and Environment
    "target": "ES2022",
    "lib": ["ES2022", "DOM"], // Add "DOM.Iterable" if needed
    "useDefineForClassFields": true, // Modern standard
    "esModuleInterop": true, // Recommended for compatibility
    "forceConsistentCasingInFileNames": true, // Prevents OS-specific issues
    "skipLibCheck": true, // Speeds up builds, assumes node_modules types are correct

    // Completeness / Project Structure
    "composite": true, // Enables project references
    "incremental": true, // Enables faster subsequent builds (`.tsbuildinfo`)
    "rootDir": "." // Default root (must be overridden per package if src/ exists)
  },
  "exclude": [
    "node_modules",
    "dist",
    ".turbo",
    "coverage",
    "**/*.config.js", // Exclude config files if they cause issues
    "**/*.config.ts"
  ]
}
```

Step 4: Configure Turborepo (turbo.json)
- Install Turborepo: pnpm add turbo --save-dev --workspace-root
- Create turbo.json in the root:

```json
// turbo.json
{
  "$schema": "https://turborepo.org/schema.json",
  "globalDependencies": [
    "tsconfig.base.json",
    ".eslintrc.json", // Add other global configs if they affect builds/linting
    "pnpm-lock.yaml"
  ],
  "pipeline": {
    "build": {
      // A package's build depends on the build of its workspace dependencies
      "dependsOn": ["^build"],
      // Output logs are not cached
      "outputs": ["dist/**", ".next/**", "!.next/cache/**", "build/**", "storybook-static/**"],
      // Environment variables that can affect the build output
      "env": [
          // Example: "STRIPE_SECRET_KEY_PROD"
      ]
    },
    "typecheck": {
      // Type checking doesn't produce cacheable artifacts directly used by other tasks
      "outputs": [],
      "dependsOn": ["^build"] // Often depends on built types from dependencies
    },
    "test": {
      // Test depends on the build output
      "dependsOn": ["build"],
      // Cache test coverage reports
      "outputs": ["coverage/**"]
    },
    "lint": {
      // Linting doesn't produce cacheable artifacts
      "outputs": []
    },
    "dev": {
      // Development servers/watchers are not cached and run persistently
      "cache": false,
      "persistent": true
    },
    "clean": {
      "cache": false
    }
  }
}
```

Step 5: Configure VS Code Settings (.vscode/settings.json)
- Create a .vscode directory in the root.
- Create settings.json inside .vscode:

```json
// .vscode/settings.json
{
  // == Editor ==
  "editor.formatOnSave": true,
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "explicit", // Use "explicit" or true
    "source.organizeImports": "explicit" // Use "explicit" or true if your formatter doesn't handle it
  },
  "files.eol": "\n", // Enforce LF line endings

  // == TypeScript ==
  // Use the workspace version of TypeScript
  "typescript.tsdk": "node_modules/typescript/lib",
  // Enable path alias autocompletion and auto-imports
  "typescript.preferences.importModuleSpecifier": "non-relative",
  // Enable inlay hints for parameters, types, etc. (optional)
  "typescript.inlayHints.parameterNames.enabled": "all",
  "typescript.inlayHints.parameterTypes.enabled": true,
  "typescript.inlayHints.variableTypes.enabled": true,
  "typescript.inlayHints.propertyDeclarationTypes.enabled": true,
  "typescript.inlayHints.functionLikeReturnTypes.enabled": true,
  "typescript.inlayHints.enumMemberValues.enabled": true,

  // == ESLint ==
  // Point ESLint to the root node_modules
  "eslint.nodePath": "node_modules",
  "eslint.validate": [
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact"
  ],

  // == Biome (or Prettier) ==
  // Set Biome as the default formatter for supported languages
  "[javascript]": {
    "editor.defaultFormatter": "biomejs.biome"
  },
  "[javascriptreact]": {
    "editor.defaultFormatter": "biomejs.biome"
  },
  "[typescript]": {
    "editor.defaultFormatter": "biomejs.biome"
  },
  "[typescriptreact]": {
    "editor.defaultFormatter": "biomejs.biome"
  },
  "[json]": {
    "editor.defaultFormatter": "biomejs.biome"
  },
  "[jsonc]": {
    "editor.defaultFormatter": "biomejs.biome"
  },
  // Add Prettier config here if using Prettier instead

  // == Git ==
  "git.autofetch": true,

  // == Search ==
  // Exclude common build/dependency folders from search
  "search.exclude": {
    "**/node_modules": true,
    "**/dist": true,
    "**/.turbo": true,
    "**/coverage": true,
    "**/pnpm-lock.yaml": true,
    "**/.next": true,
    "**/storybook-static": true
  }
}
```

- Optional: Create .vscode/extensions.json to recommend extensions:

```json
// .vscode/extensions.json
{
  "recommendations": [
    "pnpm.pnpm", // pnpm support
    "ms-vscode.vscode-typescript-next", // Use VS Code's latest TS features
    "dbaeumer.vscode-eslint", // ESLint integration
    "biomejs.biome", // Biome formatter/linter (or esbenp.prettier-vscode)
    "orta.vscode-jest", // Jest runner integration (if using Jest)
    "vitest.explorer", // Vitest runner integration (if using Vitest)
    "GitHub.copilot", // GitHub Copilot (if used)
    "amazonwebservices.aws-toolkit-vscode", // AWS Toolkit / CodeWhisperer (if used)
    "firsttris.vscode-jest-runner", // Another Jest helper
    "eamodio.gitlens", // Git superpowers
    "mhutchie.git-graph", // Git graph visualization
    "redhat.vscode-yaml" // YAML language support
  ]
}
```

Phase 2: Initial Packages & Tooling

Step 6: Create Initial Packages (packages/utils, packages/api, packages/ui)
- Create the main directory for packages: mkdir packages
- For each package (utils, api, ui):
  - Create the package directory: mkdir packages/<package-name> (e.g., packages/utils)
  - Navigate into it: cd packages/<package-name>
  - Initialize package.json: pnpm init
  - Edit <package-name>/package.json:
    - Set a scoped name (e.g., "name": "@your-scope/utils").
    - Set "version": "0.1.0".
    - Define main, module, types pointing to dist/.
    - Add "private": true unless you intend to publish individually.
    - Add build/dev scripts (e.g., using tsup or tsc).
    - Add necessary dependencies (e.g., api might depend on utils). Use pnpm add @your-scope/utils --filter @your-scope/api to add workspace dependencies.

Example packages/utils/package.json:
```json
{
  "name": "@your-scope/utils",
  "version": "0.1.0",
  "private": true,
  "description": "Shared utility functions",
  "main": "./dist/index.js",
  "module": "./dist/index.mjs",
  "types": "./dist/index.d.ts",
  "files": [
    "dist/**"
  ],
  "scripts": {
    "build": "tsup src/index.ts --format cjs,esm --dts --clean", // Example using tsup
    "dev": "tsup src/index.ts --format cjs,esm --dts --watch",
    "lint": "eslint . --ext .ts,.tsx",
    "typecheck": "tsc --noEmit"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "tsup": "^8.0.0", // Example build tool
    "typescript": "^5.0.0" // Should match root usually
  }
}
```

- Create <package-name>/tsconfig.json:
  - Extend the base config.
  - Set compilerOptions.outDir and compilerOptions.rootDir.
  - Add references to other workspace packages it depends on.

Example packages/api/tsconfig.json (assuming it uses utils):
```json
// packages/api/tsconfig.json
{
  "extends": "../../tsconfig.base.json",
  "compilerOptions": {
    // Override base if needed
    "outDir": "./dist",
    "rootDir": "./src"
  },
  "include": ["src/**/*"], // Specify files to include
  "exclude": ["node_modules", "dist"],
  "references": [
    // Declare dependency on the 'utils' package
    { "path": "../utils" }
  ]
}
```

Example packages/utils/tsconfig.json (no internal dependencies):
```json
// packages/utils/tsconfig.json
{
  "extends": "../../tsconfig.base.json",
  "compilerOptions": {
    "outDir": "./dist",
    "rootDir": "./src"
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist"]
  // No "references" needed if it doesn't depend on other workspace packages
}
```

- Create a src directory: mkdir src
- Create a sample source file (e.g., src/index.ts):

```typescript
// packages/utils/src/index.ts
export function sharedUtil(input: string): string {
  console.log("Input received by sharedUtil:", input);
  return `Processed: ${input.toUpperCase()}`;
}

// packages/api/src/index.ts
import { sharedUtil } from '@your-scope/utils'; // Note the path alias

export function apiHandler(data: string): void {
  const result = sharedUtil(data);
  console.log("API Handler Result:", result);
  // Simulate API logic
}

// packages/ui/src/index.ts (Example, could be React component)
import { sharedUtil } from '@your-scope/utils';

export function renderUI(elementId: string): void {
  const target = document.getElementById(elementId);
  if (target) {
    target.innerHTML = `<h1>UI Component</h1><p>${sharedUtil("Data for UI")}</p>`;
  }
}
```

- Return to the root directory: cd ../..
- Update tsconfig.base.json Paths: Add entries for the new packages:

```json
// tsconfig.base.json (additions to compilerOptions.paths)
    "paths": {
      "@your-scope/utils": ["packages/utils/src/index.ts"], // Point to entry or dir
      "@your-scope/utils/*": ["packages/utils/src/*"],
      "@your-scope/api": ["packages/api/src/index.ts"],
      "@your-scope/api/*": ["packages/api/src/*"],
      "@your-scope/ui": ["packages/ui/src/index.ts"],
      "@your-scope/ui/*": ["packages/ui/src/*"]
    }
```

- Install Dependencies: Go to the root and run pnpm install. This installs dependencies for all packages and links workspaces.

Step 7: Install & Configure Linting/Formatting (ESLint, Biome)
- Install dev dependencies at the root:

```bash
pnpm add -D -w eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint-config-airbnb-typescript eslint-plugin-import eslint-import-resolver-typescript eslint-plugin-jsx-a11y eslint-plugin-react eslint-plugin-react-hooks biomejs@<latest> // or prettier eslint-config-prettier eslint-plugin-prettier
```

- (Adjust ESLint plugins based on your needs, e.g., remove React ones if not used).
- Create .eslintrc.json (or .js) in the root. Configure it to use @typescript-eslint/parser, extend recommended rulesets, and importantly, configure eslint-import-resolver-typescript to use project references/paths.

```json
// Example .eslintrc.json
{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": ["./tsconfig.base.json", "./packages/*/tsconfig.json"], // Crucial for type-aware rules
    "ecmaVersion": 2022,
    "sourceType": "module"
  },
  "plugins": [
    "@typescript-eslint",
    "import"
    // "react", "react-hooks", "jsx-a11y" // Add if using React
  ],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:import/recommended",
    "plugin:import/typescript"
    // "plugin:react/recommended", // Add if using React
    // "plugin:react-hooks/recommended", // Add if using React
    // "plugin:jsx-a11y/recommended", // Add if using React
    // "prettier" // Add ONLY if using Prettier, must be LAST
  ],
  "settings": {
    "import/resolver": {
      "typescript": {
        "project": ["./tsconfig.base.json", "./packages/*/tsconfig.json"]
      }
    }
    // "react": { "version": "detect" } // Add if using React
  },
  "rules": {
    // Basic Rules
    "no-unused-vars": "off", // Use @typescript-eslint/no-unused-vars instead
    "@typescript-eslint/no-unused-vars": ["warn", { "argsIgnorePattern": "^_" }],
    "no-console": ["warn", { "allow": ["warn", "error", "info"] }], // Allow some console usage
    "quotes": ["warn", "single", { "avoidEscape": true }],
    "semi": ["warn", "always"],

    // TypeScript Specific
    "@typescript-eslint/explicit-function-return-type": "off", // Often too verbose
    "@typescript-eslint/no-explicit-any": "warn", // Warn instead of error for gradual typing
    "@typescript-eslint/no-unused-vars": ["warn", { "argsIgnorePattern": "^_" }],

    // Import Plugin Rules
    "import/no-unresolved": "error", // Ensures imports can be resolved
    "import/order": [
      "warn",
      {
        "groups": ["builtin", "external", "internal", ["parent", "sibling", "index"]],
        "pathGroups": [
          // Define order for your path aliases
          { "pattern": "@your-scope/**", "group": "internal" }
        ],
        "pathGroupsExcludedImportTypes": ["builtin"],
        "newlines-between": "always",
        "alphabetize": { "order": "asc", "caseInsensitive": true }
      }
    ],
    "import/no-cycle": "error", // Detect dependency cycles
    "import/prefer-default-export": "off" // Default exports can be debated
  },
  "ignorePatterns": [
    "node_modules/",
    "dist/",
    ".turbo/",
    "coverage/",
    "*.js", // Ignore JS config files unless needed
    "*.mjs",
    "*.d.ts"
  ]
}
```

- Create biome.json (if using Biome) or .prettierrc.json / .prettierignore (if using Prettier) in the root to configure formatting rules.

```json
// Example biome.json
{
  "$schema": "https://biomejs.dev/schemas/1.6.1/schema.json", // Use correct schema version
  "organizeImports": {
    "enabled": true
  },
  "linter": {
    "enabled": true,
    "rules": {
      "recommended": true
      // Add specific rule overrides here if needed
    }
  },
  "formatter": {
    "enabled": true,
    "formatWithErrors": false,
    "indentStyle": "space", // "space" or "tab"
    "indentWidth": 2,
    "lineWidth": 80, // Or your preferred line width
    "lineEnding": "lf"
  },
  "javascript": {
    "formatter": {
      "quoteStyle": "single", // "single" or "double"
      "jsxQuoteStyle": "double",
      "quoteProperties": "asNeeded",
      "trailingComma": "all", // "all", "es5", or "none"
      "semicolons": "always" // "always" or "asNeeded"
    }
  }
}
```

Step 8: Install & Configure Git Hooks (Husky, lint-staged, commitlint)
- Install dev dependencies at the root:

```bash
pnpm add -D -w husky lint-staged @commitlint/cli @commitlint/config-conventional
```

- Enable Git hooks: npx husky install
- Add hook script to root package.json:

```json
// package.json -> "scripts"
"prepare": "husky install"
```

- (Run pnpm prepare once manually or run pnpm install again)
- Add pre-commit hook:

```bash
npx husky add .husky/pre-commit "npx lint-staged"
```

- Configure lint-staged in root package.json:

```json
// package.json (add this section at the root level)
"lint-staged": {
  "*.{ts,tsx,js,jsx}": [
    "biome check --apply --no-errors-on-unmatched", // Or "eslint --fix"
    "biome format --write --no-errors-on-unmatched" // Or "prettier --write"
  ],
  "*.{json,md,yaml,yml}": [
    "biome format --write --no-errors-on-unmatched" // Or "prettier --write"
  ]
}
```

- (Adjust extensions and commands based on your linters/formatters)
- Add commit-msg hook for commitlint:

```bash
npx husky add .husky/commit-msg 'npx --no -- commitlint --edit "$1"'
```

- Configure commitlint by creating commitlint.config.js in the root:

```javascript
// commitlint.config.js
module.exports = {
  extends: ['@commitlint/config-conventional'],
  // Add custom rules if needed
  // rules: {
  //   'scope-enum': [2, 'always', ['core', 'api', 'ui', 'utils', 'config', 'ci']],
  // },
};
```

Phase 3: CI & Agent Instructions

Step 9: Set up Basic CI (GitHub Actions)
- Create .github/workflows/ci.yml:

```yaml
# .github/workflows/ci.yml
name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  validate:
    name: Lint, Typecheck, Test & Build
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Fetch history for commitlint if needed

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Or your preferred LTS version

      - name: Set up pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8 # Or your specific pnpm version
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint Check
        run: pnpm lint

      - name: Format Check
        run: pnpm check-format # Assumes script exists in root package.json

      - name: Type Check
        run: pnpm typecheck

      # Uncomment if you have tests
      # - name: Run Tests
      #   run: pnpm test

      - name: Build Projects
        run: pnpm build
```

Step 10: Instructions for AI Coding Agents
- Goal: Contribute code by creating Pull Requests against the main branch.
- Setup:
  - Clone the repository.
  - Ensure pnpm (version specified in root package.json) is installed.
  - Run pnpm install in the root directory to install all dependencies and link workspaces.
- Development Workflow:
  - Create a new branch for your changes: git checkout -b feature/your-change-description.
- Adding a New Package:
  - Create packages/<new-package-name>.
  - Initialize packages/<new-package-name>/package.json (use a scoped name like @your-scope/<new-package-name>). Include build, lint, typecheck scripts.
  - Create packages/<new-package-name>/tsconfig.json, extending ../../tsconfig.base.json, setting rootDir and outDir, and adding references to any workspace packages it depends on (e.g., { "path": "../utils" }).
  - Create packages/<new-package-name>/src/index.ts (or other source files).
  - Crucially: Update the root tsconfig.base.json compilerOptions.paths to include aliases for the new package (e.g., "@your-scope/<new-package-name>": ["packages/<new-package-name>/src/index.ts"], "@your-scope/<new-package-name>/*": ["packages/<new-package-name>/src/*"]).
  - If other existing packages need to import from this new package, update their tsconfig.json files to add a reference: { "path": "../<new-package-name>" }.
  - Run pnpm install again from the root if new dependencies were added.
- Modifying Existing Packages:
  - Make code changes within the relevant packages/<package-name>/src directory.
  - Use path aliases for imports between packages (e.g., import { something } from '@your-scope/utils';).
  - If adding a dependency on another workspace package, update the current package's tsconfig.json references array and run pnpm add @your-scope/<dependency-package-name> --filter @your-scope/<current-package-name>.
- Running Checks Locally:
  - Format code: pnpm format
  - Lint code: pnpm lint
  - Check types: pnpm typecheck
  - Build all packages: pnpm build
  - Run tests (if applicable): pnpm test
  - Ensure all checks pass before committing.
- Committing:
  - Stage changes: git add .
  - Commit changes using the Conventional Commits format (enforced by commitlint). Examples: feat: add user login endpoint, fix(ui): correct button alignment, docs: update setup instructions, chore(deps): update typescript. The pre-commit hook will run linting/formatting. The commit-msg hook will validate the message format.
- Pushing and Creating PR:
  - Push your branch: git push origin feature/your-change-description
  - Create a Pull Request on GitHub targeting the main branch.
  - The CI pipeline (GitHub Actions) will automatically run checks. Ensure all checks pass.

This plan provides a step-by-step guide to establishing the monorepo. Follow these instructions carefully.