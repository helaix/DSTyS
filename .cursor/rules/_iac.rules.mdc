# Sparkflow Infrastructure as Code (IaC) Rules (_iac.rules.mdc)

**Primary Principle**: All Cloudflare infrastructure and related configurations **MUST** be managed using Infrastructure as Code. This ensures reproducibility, version control, auditable changes, and disaster recovery capabilities.

**Primary Reference**: Architecture Document v0.5 (Sections 1.3, 2.4, 3.5, Development Methodology), Pulumi/Terraform/Alchemy documentation, Cloudflare provider documentation for the chosen IaC tool.

## 1. Choice of IaC Tool

1.  **Preferred Tool**: Pulumi with TypeScript.
    *   **Rationale**: Aligns with the project's primary language (TypeScript), enabling a unified codebase and developer experience. Allows leveraging EffectTS for custom providers or complex deployment logic if needed (advanced use). Supports defining infrastructure using familiar programming constructs.
2.  **Acceptable Alternatives**:
    *   **Terraform with HCL**: Mature, widely adopted, strong Cloudflare provider. Requires learning HCL.
    *   **Alchemy (Cloudflare)**: TypeScript-native IaC for Cloudflare. If it supports all necessary Sparkflow resources (Workers, DOs, D1, R2, Vectorize, Queues, AI Gateway, Containers, Workflows) and offers a robust development experience, it is a strong candidate.
3.  **Decision**: The specific tool (Pulumi, Terraform, or Alchemy) **MUST** be finalized during **Phase 0 (Foundation Refit)** and documented in Arch Doc and here. Until then, rules apply generally.

## 2. Scope of IaC Management

The following Cloudflare resources (and related configurations) **MUST** be managed by IaC:

1.  **Cloudflare Workers**:
    *   Worker script deployments (main RedwoodSDK Worker, Queue consumers, Workflow activities if deployed as separate workers).
    *   Environment variables and secrets.
    *   Bindings to D1, R2, Queues, Vectorize, DOs, AI Gateway, Services.
    *   Routes and custom domains.
2.  **Durable Objects (DOs)**:
    *   DO namespace creation.
    *   Bindings to Worker scripts.
    *   Migration scripts/definitions if applicable.
3.  **Cloudflare D1 Databases**:
    *   Database instance creation (`D1_LIVESTORE_BACKEND`, `D1_SPARKFLOW_APP_DATA`).
    *   (Potentially) Initial schema deployment if not fully handled by Drizzle migrations post-creation for `D1_SPARKFLOW_APP_DATA`. Drizzle manages schema changes.
4.  **Cloudflare R2 Buckets**:
    *   Bucket creation (`R2_STATIC_ASSETS`, `R2_APP_ASSETS`).
    *   CORS policies, public access settings (if any).
    *   (Future) Lifecycle policies.
5.  **Cloudflare Vectorize**:
    *   Index creation and configuration (dimensions, distance metric).
6.  **Cloudflare Queues**:
    *   Queue creation.
    *   Queue consumer configurations (bindings to Worker scripts).
    *   DLQ (Dead-Letter Queue) configurations.
7.  **Cloudflare AI Gateway**:
    *   Gateway creation.
    *   Provider configurations (Gemini, OpenAI, etc.).
    *   Rate limiting, caching rules, logging settings.
8.  **Cloudflare Containers**:
    *   Deployment of container images (built via separate CI step and pushed to CF Container Registry or other registry).
    *   Configuration of container instances (CPU, memory, environment variables, secrets).
    *   Network settings.
9.  **Cloudflare Workflows**:
    *   Deployment of compiled Workflow definitions (TypeScript classes).
    *   Configuration of Workflow triggers (HTTP, Queue, Cron).
    *   Bindings required by Workflow activities.
10. **Other Cloudflare Services**:
    *   DNS records (if managing project domains via CF).
    *   Firewall rules, Access policies.
    *   KV namespaces (if used for specific configuration not fitting D1).

## 3. IaC Project Structure & Organization

1.  **Dedicated Directory**: IaC code **MUST** reside in a dedicated top-level directory within the pnpm monorepo (e.g., `infra/` or `packages/iac/`).
2.  **Environments/Stacks**:
    *   IaC configurations **MUST** support multiple environments (e.g., `dev`, `staging`, `production`). This is typically managed via stacks in Pulumi/Terraform or separate configuration files.
    *   Use environment-specific configuration files for variables like resource names, sizes, API keys (managed as secrets).
3.  **Modularity**: Define infrastructure in reusable modules/components where possible (e.g., a module for a standard Worker setup, a module for a D1 database with common settings).
4.  **State Management**:
    *   IaC state files **MUST** be stored securely and remotely (e.g., Pulumi Service backend, Terraform Cloud, Cloudflare R2 with locking for Terraform, or as recommended by Alchemy).
    *   Local state files are not acceptable for shared environments.

## 4. IaC Development Workflow

1.  **Version Control**: All IaC code **MUST** be committed to the Git repository.
2.  **Branching**: Changes to infrastructure **SHOULD** be developed on feature branches, similar to application code.
3.  **Preview/Plan**: Before applying any changes, a preview/plan (`pulumi preview`, `terraform plan`, `alchemy plan`) **MUST** be generated and reviewed.
4.  **Apply**: Changes are applied (`pulumi up`, `terraform apply`, `alchemy deploy`) typically via the CI/CD pipeline for staging and production environments. Manual applies for `dev` are acceptable.
5.  **Testing IaC (Best Effort for MVP, more rigorous later)**:
    *   Linting IaC code.
    *   Static analysis if the tool supports it.
    *   (Future) Integration tests that deploy to a temporary environment and verify resource creation and basic functionality.

## 5. Secrets Management

1.  **NO Hardcoded Secrets**: API keys, passwords, sensitive tokens **MUST NOT** be hardcoded in IaC definitions or application code.
2.  **IaC Tool's Secret Management**: Utilize the secret management capabilities of the chosen IaC tool (e.g., Pulumi Config with encryption, Terraform Cloud secure variables, Cloudflare Secrets directly managed via IaC if supported by tool, or HashiCorp Vault integration).
3.  **Cloudflare Secrets**: Leverage Cloudflare Worker secrets for runtime access by Workers, DOs, and Containers. These secrets themselves **SHOULD** be populated/managed by the IaC scripts.

## 6. CI/CD Integration for IaC

1.  **Automated Preview**: GitHub Actions workflow **SHOULD** automatically run `pulumi preview` (or equivalent) on pull requests to the main development branch that modify IaC code.
2.  **Automated Apply (to Staging)**: Upon merge to a `staging` or `develop` branch, GitHub Actions **SHOULD** automatically apply IaC changes to the staging environment.
3.  **Controlled Apply (to Production)**: IaC changes to the production environment **MUST** require manual approval or a specific trigger in the CI/CD pipeline after successful staging deployment and verification.

## 7. Consistency & Documentation
1.  Naming conventions for IaC-managed resources **SHOULD** be consistent and include environment prefixes/suffixes.
2.  Significant IaC changes or architectural decisions within IaC **MUST** be documented (e.g., in the Architecture Document or dedicated IaC documentation).

## 8. Regular Audit & Review
1.  Periodically review IaC configurations for security best practices, cost optimization, and alignment with Cloudflare updates. This is part of `ONGOING-SEC-AUDIT-001`.