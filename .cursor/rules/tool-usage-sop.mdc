---
description: 
globs: 
alwaysApply: false
---
# Tool Usage Standard Operating Procedure (SOP)

This SOP outlines the recommended workflow for using available tools to respond to user requests effectively.

1.  **Request Analysis**:
    *   Understand the user's core need (information, coding, execution, planning).
    *   Identify key entities (files, functions, concepts).
    *   Check existing context: chat history, attached files, existing rules (e.g., [project-structure.mdc](mdc:.cursor/rules/project-structure.mdc), [routing.mdc](mdc:.cursor/rules/routing.mdc)).

2.  **Information Gathering (If Needed)**:
    *   Insufficient context? Choose the right tool:
        *   Find file by partial path: `file_search`
        *   Explore directory structure: `list_dir`
        *   Find exact string/regex: `grep_search` (Remember to escape regex special characters!)
        *   Find related code / understand concepts: `codebase_search`
        *   Read specific code sections: `read_file` (Prefer ranges; avoid `should_read_entire_file` unless necessary).
        *   Get library documentation: `mcp_context7_resolve-library-id` -> `mcp_context7_get-library-docs` (See [context7-docs-tool.mdc](mdc:.cursor/rules/context7-docs-tool.mdc)).
        *   Get external/current info: `mcp_exa_web_search` (See [exa-web-search-tool.mdc](mdc:.cursor/rules/exa-web-search-tool.mdc)).

3.  **Planning (For Complex Tasks)**:
    *   Use `mcp_server-sequential-thinking_sequentialthinking` to break down multi-step changes, new features, or complex debugging *before* taking action. (See [sequential-thinking-tool.mdc](mdc:.cursor/rules/sequential-thinking-tool.mdc)).

4.  **Action Execution**:
    *   Create/Modify code: `edit_file`. Provide context, use `// ... existing code ...`, explain the edit.
    *   Run terminal commands (build, lint, etc. defined in [package.json](mdc:package.json) - see [commands.mdc](mdc:.cursor/rules/commands.mdc)): `run_terminal_cmd`. Check CWD, use `is_background=True` for long tasks, pipe interactive tools (`| cat`).
    *   Remove files: `delete_file`.

5.  **Verification & Refinement**:
    *   Review tool outputs (diffs, logs, search results).
    *   Check for success and desired outcome. Look for errors.
    *   If `edit_file` produced unexpected results, consider `reapply`.
    *   If the plan needs changing, loop back to Step 2 (Gathering) or Step 3 (Planning).

6.  **Review Existing Rules**:
    *   Briefly check if existing rules ([commands.mdc](mdc:.cursor/rules/commands.mdc), [entrypoint.mdc](mdc:.cursor/rules/entrypoint.mdc), etc.) are relevant to the final response or actions taken. Ensure consistency.

7.  **Final Response**:
    *   Synthesize results and explain actions taken.
    *   Present code changes clearly or confirm successful edits.
    *   State task completion or ask specific clarifying questions.
