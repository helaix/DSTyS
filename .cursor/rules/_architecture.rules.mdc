# Sparkflow Architecture Rules (_architecture.rules.mdc)

**Purpose:** To enforce adherence to Sparkflow's established architectural principles and decisions, ensuring system integrity, consistency, scalability, and maintainability.

---
**Rule ID:** `ARCH-001`
**Rule Title:** Strict Adherence to Key Architectural Decisions
**Applies To:** All Agents (especially CodeGen, Codex)
**Purpose:** Maintain the architectural integrity and strategic technical direction of the project.
**Scope:** All technical design, implementation, and infrastructure tasks.
**Guideline:** All design and implementation MUST strictly follow the Key Architecture Decisions outlined in Architecture Document v0.5, Section 1.3. These include:
    1.  **EffectTS End-to-End:** All significant business logic, state transformations, asynchronous operations, and interactions with external services MUST be implemented using EffectTS.
    2.  **Infrastructure Abstraction via EffectTS Services and Layers:** All interactions with external services (e.g., AI APIs via AI Gateway, Clerk API, D1, R2, LFS client, Cloudflare Workflows API, Cloudflare Containers API via RenderManagerDO) and Cloudflare platform components MUST be wrapped in abstract EffectTS service interfaces defined using `Context.Tag`. Concrete "Live" implementations MUST be provided via EffectTS Layers.
    3.  **Local-First Sync Engine (LFS - e.g., `LiveStore.dev`) with D1 Backend:** LFS is the primary mechanism for real-time operational state synchronization. It uses a dedicated Cloudflare D1 database (`D1_LIVESTORE_BACKEND`) for its persistence.
    4.  **RedwoodSDK on Cloudflare Workers:** The main application is a RedwoodSDK project. The primary Cloudflare Worker serves static frontend assets AND handles backend API logic via Server Actions.
    5.  **Cloudflare Workflows for Complex Asynchronous Process Orchestration:** Cloudflare Workflows (TypeScript-defined) MUST be used as the primary mechanism for orchestrating multi-step, stateful, long-running, and fault-tolerant asynchronous processes. Workflow activities execute EffectTS programs.
    6.  **Durable Objects (DOs) as Specialized EffectTS Program Runners, LFS Clients & Workflow Components:** DOs host stateful AI agents/actors (EffectTS core logic), act as LFS clients, and can be invoked as stateful activities within Cloudflare Workflows or manage Workflow instances.
    7.  **Cloudflare Containers for Direct Remotion Rendering (Managed by DOs):** The `RenderManagerDO` manages Cloudflare Containers running Remotion. AWS Lambda is a secondary/fallback.
    8.  **Modular, Agentic Architecture:** System components (Epics) are realized as EffectTS services and DO-based agents, communicating via LFS and orchestrated by Cloudflare Workflows.
    9.  **Infrastructure as Code (IaC) is Mandatory:** All Cloudflare infrastructure defined using Pulumi/TypeScript (preferred), Terraform, or Alchemy. (See `_iac.rules.mdc`).
    10. **Gemini 2.5 Pro as Primary Multimodal AI Engine:** Focus on Gemini for video understanding, multimodal analysis, and generative tasks, accessed via AI Gateway.
    11. **Clerk for Managed Authentication:** Provides user identity, sessions, and security primitives.
    12. **API Strategy (Server Actions Primary):** Redwood Server Actions (EffectTS-driven) for client commands. LFS for state sync.
    13. **Schema-Driven Development (`@effect/schema`):** For LFS documents, D1 tables, Server Action payloads, Workflow step data.
    14. **Cloud-Native Storage (R2, D1, Vectorize):** Optimal use of Cloudflare's storage solutions.
    15. **Knowledge RAG Strategy:** Initial: D1 for metadata/indexes (`D1_SPARKFLOW_APP_DATA`) and Vectorize for embeddings. Services designed for future knowledge graph extensibility.
**Reference:** `/Users/ryanhunter/helaix/sparkflow/docs/plan/ArchitectureDoc-v1.5-2025-05-20.md` (Section 1.3)

---
**Rule ID:** `ARCH-002`
**Rule Title:** Respect Component Responsibilities (Epics)
**Applies To:** All Agents
**Purpose:** Maintain modularity and clear separation of concerns.
**Scope:** Feature implementation and code organization.
**Guideline:** Functionality MUST be implemented within the appropriate major component (Epic) as defined in PRD v1.5, Section 2.1 and Architecture Document v0.5, Section 3.2 (e.g., `CORE_INFRA`, `CONVO_AI`, `CONTEXT_ENGINE`, etc.). Avoid placing logic in incorrect components.
**Reference:**
    *   `/Users/ryanhunter/helaix/sparkflow/docs/plan/PRD-V1.5-2025-05-20.md` (Section 2.1)
    *   `/Users/ryanhunter/helaix/sparkflow/docs/plan/ArchitectureDoc-v1.5-2025-05-20.md` (Section 3.2)

---
**Rule ID:** `ARCH-003`
**Rule Title:** Follow Data Flow Patterns
**Applies To:** All Agents
**Purpose:** Ensure data consistency and efficient processing.
**Scope:** Design of data interactions and state management.
**Guideline:** Adhere to the data flow patterns illustrated in Architecture Document v0.5, Section 4.3. Emphasize LFS for operational state, D1 for persistence, R2 for blobs, and Cloudflare Workflows for orchestrating asynchronous data transformations. Ensure clarity on "source of truth" vs. "cached/reactive state". Data Lineage events MUST be recorded for all significant transformations.
**Reference:** `/Users/ryanhunter/helaix/sparkflow/docs/plan/ArchitectureDoc-v1.5-2025-05-20.md` (Section 4.3)

---
**Rule ID:** `ARCH-004`
**Rule Title:** Implement API Strategy Correctly
**Applies To:** All Agents
**Purpose:** Provide a clear and consistent approach to client-server communication.
**Scope:** Backend API development and client-side interactions.
**Guideline:** Use LFS for real-time state synchronization. Use Redwood Server Actions (with EffectTS handlers) for client-initiated commands/mutations. Reserve Effect-HTTP/RPC for future specialized service-to-service or public APIs.
**Reference:** `/Users/ryanhunter/helaix/sparkflow/docs/plan/ArchitectureDoc-v1.5-2025-05-20.md` (Section 4.1)

---
**Rule ID:** `ARCH-005`
**Rule Title:** Adhere to Storage Strategy
**Applies To:** All Agents
**Purpose:** Optimize storage cost, performance, and queryability.
**Scope:** Data persistence and asset management.
**Guideline:** Use R2 for large binary assets (source videos, generated assets). Use D1 as the backend for LFS (`D1_LIVESTORE_BACKEND`) and for Sparkflow's application-specific relational data (`D1_SPARKFLOW_APP_DATA` - video metadata, RAG indexes, lineage, templates). Use Vectorize for embeddings.
**Reference:** `/Users/ryanhunter/helaix/sparkflow/docs/plan/ArchitectureDoc-v1.5-2025-05-20.md` (Section 5.1)

---
**Rule ID:** `ARCH-006`
**Rule Title:** Asynchronous Processing Orchestration Strategy
**Applies To:** All Agents
**Purpose:** Ensure robust, observable, and scalable handling of asynchronous operations.
**Scope:** Design and implementation of background tasks and long-running processes.
**Guideline:**
    *   "Cloudflare Workflows (TypeScript-defined) are the **primary and preferred** method for orchestrating multi-step, long-running, stateful, and potentially fallible asynchronous tasks (e.g., video analysis, complex creative generation, campaign lifecycles)."
    *   "Cloudflare Queues are to be used for simple decoupling of tasks, triggering Cloudflare Workflows, or for very simple, stateless background jobs that don't require complex orchestration. Messages are processed by EffectTS programs in Worker queue handlers."
    *   "Durable Object alarms or internal EffectTS-based state machines within DOs should be used for simpler, DO-scoped asynchronous logic, or when a DO is acting as a manager for multiple Workflow instances."
**Reference:** `/Users/ryanhunter/helaix/sparkflow/docs/plan/ArchitectureDoc-v1.5-2025-05-20.md` (Section 3.2.2, 4.1)

---
**Rule ID:** `ARCH-007`
**Rule Title:** Knowledge RAG Strategy Implementation
**Applies To:** All Agents
**Purpose:** Provide a clear path for the RAG system's development and evolution.
**Scope:** Design and implementation of the RAG system.
**Guideline:** "The initial RAG implementation will use D1 (`D1_SPARKFLOW_APP_DATA`) for metadata and structural indexes, and Cloudflare Vectorize for embeddings. All RAG service logic (ingestion, querying) MUST be implemented as EffectTS services and designed with future extensibility towards more explicit knowledge graph structures in mind."
**Reference:** `/Users/ryanhunter/helaix/sparkflow/docs/plan/ArchitectureDoc-v1.5-2025-05-20.md` (Section 1.3, 3.2.2)

---
**Rule ID:** `ARCH-008`
**Rule Title:** Mandatory Infrastructure Abstraction via EffectTS Services
**Applies To:** All Agents (especially CodeGen, Codex)
**Purpose:** Critical for testability, portability, maintainability, and enabling AI agents to work against stable interfaces.
**Scope:** All interactions with external services and Cloudflare platform components.
**Guideline:** "All interactions with external services (Cloudflare services like D1 via Drizzle, R2, AI APIs via AI Gateway, LFS client/server, Cloudflare Workflows API, Cloudflare Containers API via DOs, Clerk SDK) and Cloudflare platform components MUST be wrapped in abstract EffectTS service interfaces (defined with `Context.Tag`). Concrete 'Live' implementations will be provided via `Layer`s."
**Reference:** `/Users/ryanhunter/helaix/sparkflow/docs/plan/ArchitectureDoc-v1.5-2025-05-20.md` (Section 1.3, Decision 2)

---
**Rule ID:** `ARCH-009`
**Rule Title:** Adherence to Component Interactions
**Applies To:** All Agents
**Purpose:** Ensure correct communication paths and responsibilities between system components.
**Scope:** Design and implementation of inter-component communication.
**Guideline:** Follow the component interaction patterns described in Architecture Document v0.5, Section 3.1 (High-Level Diagram) and conceptual interactions:
    *   UI (Redwood Client) -> (Clerk for Auth) -> (Server Action for Command/Workflow Trigger) -> CF Primary Worker (EffectTS)
    *   CF Primary Worker (EffectTS) -> (Triggers) -> Cloudflare Workflow (TypeScript Orchestrator)
    *   Cloudflare Workflow -> (Invokes Activities in) -> Worker_Activities (EffectTS) / DO_Activities (EffectTS)
    *   DO_Activities (e.g., `CreativeGenDO` -> `RenderManagerDO`) -> (Manages) -> Cloudflare Container (Remotion)
    *   All Components (UI, Worker, DOs, Workflow Activities) <-> (Read/Write/Subscribe via SDKs/Services to) -> Local-First Sync Engine (LFS) & its D1 Backend
    *   All Components needing AI -> (Via `AIGatewayService` EffectTS) -> Cloudflare AI Gateway -> External AI APIs (Gemini, etc.)
    *   All Components needing App DB -> (Via Drizzle+EffectTS Services) -> `D1_SPARKFLOW_APP_DATA`
**Reference:** `/Users/ryanhunter/helaix/sparkflow/docs/plan/ArchitectureDoc-v1.5-2025-05-20.md` (Section 3.1)

---
**Rule ID:** `ARCH-010`
**Rule Title:** Deviation Approval
**Applies To:** All Agents, Human Developers
**Purpose:** Maintain architectural consistency and quality.
**Scope:** Any proposed deviation from established architectural rules.
**Guideline:** Any deviation from these core architectural principles requires explicit discussion and approval from Ryan Hunter. Document approved deviations and their rationale (e.g., in an ADR or Workplan notes).
**Verification:** PR reviews.

---
**Rule ID:** `ARCH-011`
**Rule Title:** Evolving Cloudflare Services
**Applies To:** All Agents, Human Developers
**Purpose:** Ensure awareness of the dynamic nature of Cloudflare's newer services.
**Scope:** Design and implementation involving Cloudflare Containers, Workflows, D1, etc.
**Guideline:** Given that Cloudflare services like Containers, Workflows, and D1 are rapidly evolving, development teams and AI agents **MUST** regularly consult Cloudflare’s official documentation for the latest features, version-specific limitations, best practices, and potential breaking changes. Do not assume features are static or universally available across all Cloudflare plans/betas without verification.
**Reference:** Cloudflare Developer Documentation.