---
description: 
globs: 
alwaysApply: false
---
# CLI Commands Structure

The CLI commands for this project are organized in the [`src/commands`](mdc:src/commands) directory. Each file defines a set of related commands for the CLI, using Effect-TS and @effect/cli for command definitions and parsing.

## Main Command Files
- [`task.ts`](mdc:src/commands/task.ts): Handles Task-Master/Linear bridge commands, including import/export (sync), and stubs for AI features. Uses dependency injection for services and configuration.
- [`sync.ts`](mdc:src/commands/sync.ts): Provides a high-level sync command that delegates all business logic to the Linear service. Handles CLI parsing and output only.
- [`project.ts`](mdc:src/commands/project.ts): Manages project-related commands, such as listing and creating projects in Linear.
- [`team.ts`](mdc:src/commands/team.ts): Manages team-related commands, such as listing and creating teams in Linear.
- [`issue.ts`](mdc:src/commands/issue.ts): Handles issue-related commands, such as listing, showing, and updating issues in Linear.

## Conventions
- All business logic and API calls must be delegated to service modules (e.g., [`../services/linear.ts`](mdc:src/services/linear.ts)). Command files should only handle CLI parsing, user interaction, and output.
- Use dependency injection via Effect-TS tags (e.g., `Linear`) to access services.
- Use type-only imports for types when `verbatimModuleSyntax` is enabled (e.g., `import { type LinearService } from "../services/linear.js"`).
- Prefer concise, composable command definitions using `Command.make` and Effect-TS generators.
- Each command file should export its main command(s) for inclusion in the CLI entry point.

See the referenced files for concrete examples of these conventions.
