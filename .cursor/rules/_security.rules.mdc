# DSTyS Security Rules (_security.rules.mdc)

**Purpose:** To define security best practices and requirements for developing the DSTyS library, focusing on protecting against common vulnerabilities in library code and ensuring safe interaction with external services (LMs).
**Primary References:** OWASP Top 10 (relevant aspects), Node.js Security Best Practices, TypeScript Security.

---
**Rule ID:** `DSTYS-SEC-001`
**Rule Title:** Secure API Key and Secret Handling (for LM Clients)
**Applies To:** Language Model client implementations (`clients/`)
**Purpose:** Protect user API keys when interacting with LM providers.
**Scope:** LM client configuration and request execution.
**Guideline:**
    *   LM clients (e.g., `OpenAI.ts`, `Anthropic.ts`) **MUST** accept API keys as constructor arguments or read them from standard environment variables (e.g., `OPENAI_API_KEY`).
    *   **NEVER** hardcode API keys or other secrets within the library's source code.
    *   API keys **MUST NOT** be logged by default. If logging of requests containing keys is necessary for debugging, it must be explicitly enabled by the user and carry strong warnings.
    *   Ensure API keys are transmitted securely (HTTPS) to LM providers.
**Rationale:** Prevents accidental leakage of user credentials.

---
**Rule ID:** `DSTYS-SEC-002`
**Rule Title:** Input Validation for Public APIs
**Applies To:** All public functions and methods of DSTyS modules
**Purpose:** Prevent unexpected behavior or errors due to invalid inputs.
**Scope:** Library API boundaries.
**Guideline:**
    *   All public-facing functions and methods that accept complex inputs (especially objects or strings that will be parsed) SHOULD perform runtime validation of these inputs, even with TypeScript's static typing.
    *   Use Zod or Effect Schema for defining expected input shapes and validating them at the entry points of public APIs.
    *   Return clear, typed errors (using Effect's error channel) when validation fails.
**Rationale:** Enhances robustness and provides clear feedback to library users on incorrect usage.

---
**Rule ID:** `DSTYS-SEC-003`
**Rule Title:** Safe Handling of External Data (LM Responses)
**Applies To:** Parsing and processing of responses from LMs
**Purpose:** Prevent issues arising from malformed or unexpected LM outputs.
**Scope:** `Adapter` implementations, `Predict` module output parsing.
**Guideline:**
    *   When parsing LM responses (e.g., JSON, structured text), use robust parsers and validate the structure against expected schemas (Zod or Effect Schema).
    *   Handle parsing errors gracefully, returning typed errors via Effect.
    *   Be cautious if LM outputs are ever used to construct file paths, database queries, or system commands (though this is unlikely for DSTyS core, it's a general principle). Sanitize and validate such outputs rigorously if this pattern ever emerges in extensions.
**Rationale:** Protects against errors or potential manipulation if LMs produce unexpected output formats.

---
**Rule ID:** `DSTYS-SEC-004`
**Rule Title:** Dependency Vulnerability Management
**Applies To:** All third-party software dependencies
**Purpose:** Protect against exploits targeting known vulnerabilities in dependencies.
**Scope:** `package.json` and CI/CD.
**Guideline:**
    *   Regularly scan project dependencies (npm packages) for known vulnerabilities using `pnpm audit` and GitHub Dependabot.
    *   Integrate these scans into the CI/CD pipeline.
    *   Establish a process for promptly evaluating the risk of identified vulnerabilities and applying security patches for all third-party dependencies.
    *   Minimize the number of dependencies and prefer well-maintained, reputable libraries.
**Rationale:** Mitigates risks from vulnerable third-party code.

---
**Rule ID:** `DSTYS-SEC-005`
**Rule Title:** Secure Error Handling and Logging
**Applies To:** Error handling and logging mechanisms within the library
**Purpose:** Prevent information leakage that could be sensitive in a user's application.
**Scope:** Library-wide error management.
**Guideline:**
    *   Internal library errors or errors from LM APIs SHOULD be wrapped in DSTyS-specific typed errors (using Effect).
    *   Avoid logging raw API responses from LMs by default, especially if they might contain user data from prompts. Logging should be opt-in for debugging by the library user.
    *   Ensure that stack traces or internal library details exposed in errors do not inadvertently reveal sensitive architectural information that isn't already public.
**Rationale:** Balances debuggability with the principle of not leaking potentially sensitive operational details of the user's application.

---
**Rule ID:** `DSTYS-SEC-006`
**Rule Title:** Tool Execution Security (for `Tool` class and `ReAct`)
**Applies To:** `Tool.ts`, `ReAct.ts`
**Purpose:** Ensure users understand the implications of executing tools.
**Scope:** Tool integration and execution.
**Guideline:**
    *   The `Tool` class wraps user-provided functions. DSTyS itself does not execute arbitrary code from LMs directly.
    *   Documentation for `Tool` and `ReAct` MUST clearly state that the security of tool execution is the responsibility of the user who defines and provides the tool functions.
    *   If DSTyS were to ever implement tools that *do* execute code suggested by an LM (e.g., a Python interpreter tool), such tools MUST run in a sandboxed environment and have strict permissions. (This is out of scope for core DSTyS but relevant for extensions).
**Rationale:** Clarifies security responsibilities regarding tool execution.

---
**Rule ID:** `DSTYS-SEC-007`
**Rule Title:** Serialization Security (`save`/`load` methods)
**Applies To:** `Module.save`, `Module.load`, `Predict.save`, `Predict.load`
**Purpose:** Mitigate risks associated with deserializing data.
**Scope:** Saving and loading module state.
**Guideline:**
    *   When loading module state (e.g., from JSON or pickled Python objects if cross-language compatibility is ever attempted), be aware of deserialization risks.
    *   Prefer JSON for state persistence due to its simpler, safer parsing model compared to formats like Pickle (which is not directly applicable to TS but serves as an analogy for complex binary formats).
    *   If loading "program" behavior (e.g., Python's `save_program=True` equivalent), ensure the source is trusted or mechanisms are in place to validate/sandbox loaded code. For DSTyS, this primarily means validating the structure of loaded JSON against expected schemas.
**Rationale:** Protects against loading malicious or corrupted state/program data.