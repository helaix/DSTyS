# DSTyS Workplan Execution Rules (_workplan-execution.rules.mdc)

**Purpose:** To define the standards for creating, following, and updating Workplan documents for the DSTyS project, ensuring tasks are well-defined, progress is tracked, and outcomes are verified, especially when tailoring tasks for different AI development agents.
**Primary Reference:** DSTyS Project Overview (`docs/planning/ProjectOverview.md`), AI Development Ecosystem Strategy (`_ai_developer_ecosystem.rules.mdc`).

---
**Rule ID:** `DSTYS-WP-EXEC-001`
**Rule Title:** Mandatory Workplan for Implementation
**Applies To:** All development tasks (Human and AI)
**Purpose:** Ensure all implementation work is properly planned and tracked.
**Scope:** Initiation of any coding task.
**Guideline:** NO code implementation (beyond trivial fixes or very small exploratory spikes approved by the lead) **SHOULD** begin without an associated Workplan document. Workplans are derived from "Implementation Chunks" in the Project Overview.
**Rationale:** Prevents unplanned work and ensures alignment with project goals.

---
**Rule ID:** `DSTYS-WP-EXEC-002`
**Rule Title:** Adherence to Workplan Template
**Applies To:** All Workplan documents
**Purpose:** Ensure consistency and completeness of task definition.
**Scope:** Workplan creation and maintenance in `docs/planning/workplans/`.
**Guideline:** All Workplans **MUST** follow the standard "Workplan Template" located at `docs/planning/templates/Workplan.md`. Key fields include:
    *   `Workplan ID` (matches filename, e.g., `CORE-SignatureImplementation`).
    *   `Project`: DSTyS.
    *   `Status`: (Not Started, Draft, In Progress, Blocked, In Review, Completed) - **MUST be kept current.**
    *   `Target Primary Agent(s)`: **CRITICAL** (e.g., "Codex", "CodeGen", "Human+Cursor").
    *   `Prerequisites (Dependencies)`: Links to other Workplan IDs or document states.
    *   `Detailed Tasks / Implementation Checklist`: Granular steps.
    *   `Technical Specifications / Proposed Implementation`: Detailed technical approach.
    *   `Testing Strategy / Verification Steps`: **CRITICAL**.
    *   `Decision Authority`, `Questions/Uncertainties`, `Acceptable Tradeoffs`, `Notes & Decisions Log`.
**Rationale:** Standardizes task definition and tracking.
**Reference:** `docs/planning/templates/Workplan.md`

---
**Rule ID:** `DSTYS-WP-EXEC-003`
**Rule Title:** Detail Level Based on "Target Primary Agent(s)"
**Applies To:** Workplan creation, especially for AI agents
**Purpose:** Optimize Workplan effectiveness for different AI agent capabilities.
**Scope:** Content of `Technical Specifications` and `Implementation Checklist`.
**Guideline:** The level of detail in `Technical Specifications` and `Implementation Checklist` MUST be adjusted for the 'Target Primary Agent(s)':
    *   **For Execution-Focused AI Agents (e.g., Codex):**
        *   Workplans **MUST** be extremely detailed and unambiguous.
        *   Provide explicit TypeScript interfaces, class structures, function signatures, input/output schemas (using Zod or Effect Schema).
        *   Detail step-by-step algorithmic logic for complex functions.
        *   Identify all existing files to be modified and new files to be created, with precise paths within the `source/` or `tests/` directories.
        *   Include all necessary codebase context (e.g., relevant parts of `Signature.ts` if implementing a `Module` that uses it) or reference how RepoPrompt should be used to get it.
        *   `Verification Steps` **MUST** primarily point to the corresponding `TEST-[ComponentName]Tests.md` workplan, implying that the agent writes/ports tests first, then implements to make them pass.
    *   **For Scaffolding/Research AI Agents (e.g., CodeGen):**
        *   Provide clear objectives (e.g., "Draft the `LM.ts` class structure based on Python DSPy's `LM` and `BaseLM` classes, including method signatures and JSDoc comments. Integrate Effect for async calls.").
        *   Specify input/output types and key behaviors. Context is still important.
    *   **For Human Developers (Ryan Hunter + AI Pair like Cursor):**
        *   Workplans can be slightly less prescriptive on minute implementation details, allowing for exploratory development, but key objectives, acceptance criteria, and architectural alignment (especially with EffectTS patterns) are still crucial. Emphasis on documenting decisions in the "Notes & Decisions Log".
**Rationale:** Ensures AI agents receive instructions appropriate to their capabilities.
**Reference:** `_ai_developer_ecosystem.rules.mdc` (Rule `AIDEV-003`)

---
**Rule ID:** `DSTYS-WP-EXEC-004`
**Rule Title:** Workplan Status Updates and Tracking
**Applies To:** Assignees of Workplans (Human or AI)
**Purpose:** Provide clear visibility into task progress.
**Scope:** Workplan lifecycle.
**Guideline:**
    *   The `Status` field in the Workplan **MUST** be updated promptly by the assignee when work starts, is blocked, goes into review, or is completed.
    *   The "Implementation Checklist" **MUST** be used to track task-level progress by checking off items.
**Rationale:** Essential for project management and coordination.

---
**Rule ID:** `DSTYS-WP-EXEC-005`
**Rule Title:** Handling Uncertainties, Blockers, and Changes in Workplans
**Applies To:** Assignees of Workplans
**Purpose:** Ensure issues are surfaced, documented, and addressed promptly.
**Scope:** Execution of Workplan tasks.
**Guideline:**
    *   **Uncertainties/Questions:** Document in the "Questions/Uncertainties" section. If blocking, change status to "Blocked" and immediately notify the Lead.
    *   **Deviations:** If the proposed implementation needs to deviate significantly due to new findings, the Workplan **MUST** be updated with the new approach and rationale in the "Notes & Decisions Log" *before* or *concurrently* with the change. Flag for review if architecturally significant.
**Rationale:** Promotes adaptive planning and clear communication.

---
**Rule ID:** `DSTYS-WP-EXEC-006`
**Rule Title:** Verification and Completion of Workplans
**Applies To:** Assignees of Workplans
**Purpose:** Ensure work meets quality standards and functional requirements before closure.
**Scope:** Final stages of Workplan execution.
**Guideline:**
    *   All items in the "Implementation Checklist" **MUST** be completed.
    *   All "Verification Steps" (especially passing all tests from the corresponding `TEST-*` workplan) **MUST** be successfully executed.
    *   Code **MUST** pass all CI checks (lint, format, typecheck, tests).
    *   A Pull Request (PR) linking the Workplan **MUST** be created, reviewed, and merged as per `_git_workflow.rules.mdc`.
    *   Only then can the Workplan status be set to "Completed".
**Rationale:** Defines "done" for a task and ensures quality.
**Reference:** `_testing.rules.mdc` (Rule `DSTYS-TEST-002`)

---
**Rule ID:** `DSTYS-WP-EXEC-007`
**Rule Title:** Workplan Storage, Naming, and Linking
**Applies To:** All Workplan documents
**Purpose:** Ensure Workplans are organized, identifiable, and traceable.
**Scope:** Workplan management.
**Guideline:**
    *   Workplans **MUST** be stored in the `docs/planning/workplans/` directory.
    *   The filename **MUST** match the Workplan Identifier (e.g., `CORE-SignatureImplementation.md`).
    *   Workplans SHOULD link to relevant Linear tickets (if used), and PRs/commits SHOULD link back to Workplan IDs.
    *   The `docs/planning/workplans/Outline.md` serves as the master index.
**Rationale:** Facilitates organization and cross-referencing of project artifacts.